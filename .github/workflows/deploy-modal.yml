name: Deploy Modal Services

on:
  push:
    branches: [main, dev, dev/*, feature/*, preview/*]
    paths:
      - 'modal-service/**'
      - '.github/workflows/deploy-modal.yml'
  pull_request:
    branches: [main]
    paths:
      - 'modal-service/**'
  workflow_dispatch: # Allow manual triggering

jobs:
  deploy:
    name: Deploy to Modal
    runs-on: ubuntu-latest
    environment: production  # Use production environment
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Modal CLI
        run: |
          pip install modal

      - name: Authenticate with Modal
        run: |
          modal token set --token-id ${{ secrets.MODAL_TOKEN_ID }} --token-secret ${{ secrets.MODAL_TOKEN_SECRET }}
        env:
          MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
          MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}

      - name: Get branch info
        id: branch
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "branch_name=${{ github.head_ref }}" >> $GITHUB_OUTPUT
            echo "is_preview=true" >> $GITHUB_OUTPUT
          else
            branch_name="${{ github.ref_name }}"
            echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
            if [[ "$branch_name" == "main" ]]; then
              echo "is_preview=false" >> $GITHUB_OUTPUT
            else
              echo "is_preview=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Determine app name
        id: app_name
        run: |
          branch_name="${{ steps.branch.outputs.branch_name }}"
          if [[ "$branch_name" == "main" ]]; then
            app_name="mimetic-demo"
          else
            # Sanitize branch name for Modal
            safe_branch=$(echo "$branch_name" | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
            app_name="mimetic-demo-$safe_branch"
          fi
          echo "app_name=$app_name" >> $GITHUB_OUTPUT
          echo "Deploying to Modal app: $app_name"

      - name: Deploy service
        run: |
          cd modal-service
          echo "Deploying Modal app: ${{ steps.app_name.outputs.app_name }}"
          modal deploy modal_service.py

      - name: Get deployment URL
        id: url
        run: |
          cd modal-service
          echo "Getting deployment URL for app: ${{ steps.app_name.outputs.app_name }}"
          
          # Wait a moment for deployment to complete
          sleep 10
          
          # Get app URL from Modal
          APP_URL=$(modal app list --json | jq -r '.[] | select(.name=="${{ steps.app_name.outputs.app_name }}") | .web_url // empty')
          if [ -n "$APP_URL" ]; then
            echo "app_url=$APP_URL" >> $GITHUB_OUTPUT
            echo "Modal app deployed at: $APP_URL"
          else
            echo "Warning: Could not retrieve app URL for ${{ steps.app_name.outputs.app_name }}"
            # List all apps for debugging
            echo "Available apps:"
            modal app list
          fi

      - name: Update deployment status
        if: steps.url.outputs.app_url != ''
        run: |
          echo "âœ… Modal deployment successful!"
          echo "ðŸš€ App URL: ${{ steps.url.outputs.app_url }}"
          echo "ðŸ“± App Name: ${{ steps.app_name.outputs.app_name }}"
          echo "ðŸŒ¿ Branch: ${{ steps.branch.outputs.branch_name }}"

      - name: Comment on PR (if preview deployment)
        if: github.event_name == 'pull_request' && steps.url.outputs.app_url != ''
        uses: actions/github-script@v6
        with:
          script: |
            const appUrl = '${{ steps.url.outputs.app_url }}';
            const appName = '${{ steps.app_name.outputs.app_name }}';
            const branch = '${{ steps.branch.outputs.branch_name }}';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Modal Preview Deployment**
            
            **Branch:** \`${branch}\`
            **App Name:** \`${appName}\`
            **URL:** ${appUrl}

            You can test the ML inference API at:
            - Health check: \`${appUrl}/health\`
            - Image prediction: \`${appUrl}/predict\`
            - Video processing: \`${appUrl}/process_video\`

            This preview deployment will be available until the PR is merged or closed.`
            });

  cleanup-preview:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Modal CLI
        run: pip install modal

      - name: Authenticate with Modal
        run: |
          modal token set --token-id ${{ secrets.MODAL_TOKEN_ID }} --token-secret ${{ secrets.MODAL_TOKEN_SECRET }}

      - name: Delete preview app
        run: |
          branch_name="${{ github.head_ref }}"
          safe_branch=$(echo "$branch_name" | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          app_name="mimetic-demo-$safe_branch"
          echo "Attempting to delete preview app: $app_name"
          modal app stop "$app_name" || true
          echo "Preview app cleanup completed"